AWSTemplateFormatVersion: '2010-09-09'
Description: SSLMate Cert Spotter MozDef monitor
Metadata:
  SourceCode: https://github.com/gene1wood/certspotter-cloudformation
  Todo1: Convert to AWS lambda function
  Todo2: Add heartbeat/watchdog to detect if the cronjob stops working
Parameters:
  SSHKeyName:
    Description: SSH Key Name
    Type: String
  SQSRegion:
    Description: The AWS region containing the target SQS queue
    Default: us-west-1
    Type: String
  SQSQueueName:
    Description: The name of the SQS queue to send events to
    Type: String
  SQSAccountId:
    Description: The AWS account ID that contains the SQS queue if that queue is not
      in the local account or leave blank if the SQS queue is local
    Default: ''
    Type: String
  WatchList:
    Description: Comma delimited list of domains to watch OR an s3 URL to a JSON document
      containing the list of domains under a 'domains' key
    Type: CommaDelimitedList
    Default: .mozilla.com, .mozilla.org, .mozilla.net, .firefox.com, .getfirefox.com
  CronSchedule:
    Description: 'The 5 field crontab schedule for running certspotter (Default :
      Hourly)'
    Type: String
    Default: '0 * * * *'
  EIPAllocationId:
    Description: The optional Allocation ID of the already existing Elastic IP you
      want to associate with this new instance
    Type: String
    Default: ''
Conditions:
  AssociateEIP: !Not
    - !Equals
      - !Ref 'EIPAllocationId'
      - ''
Mappings:
  RegionMap:
    us-east-1:
      CentOS7x8664withUpdatesHVM: ami-6d1c2007
    us-west-2:
      CentOS7x8664withUpdatesHVM: ami-d2c924b2
    us-west-1:
      CentOS7x8664withUpdatesHVM: ami-af4333cf
    eu-central-1:
      CentOS7x8664withUpdatesHVM: ami-9bf712f4
    eu-west-1:
      CentOS7x8664withUpdatesHVM: ami-7abd0209
    ap-southeast-1:
      CentOS7x8664withUpdatesHVM: ami-f068a193
    ap-southeast-2:
      CentOS7x8664withUpdatesHVM: ami-fedafc9d
    ap-northeast-1:
      CentOS7x8664withUpdatesHVM: ami-eec1c380
    ap-northeast-2:
      CentOS7x8664withUpdatesHVM: ami-c74789a9
    sa-east-1:
      CentOS7x8664withUpdatesHVM: ami-26b93b4a
Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group
      SecurityGroupIngress:
        - FromPort: '22'
          IpProtocol: tcp
          CidrIp: '0.0.0.0/0'
          ToPort: '22'
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SendSQSMessageToMozDef
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sqs:Send*
                Resource: arn:aws:sqs:us-west-1:656532927350:infosec_mozdef_events*
              - Action: sqs:GetQueueUrl
                Resource: arn:aws:sqs:us-west-1:656532927350:infosec_mozdef_events*
                Effect: Allow
        - PolicyName: ReadInfosecInternalData
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: arn:aws:s3:::infosec-internal-data/*
              - Effect: Allow
                Action: s3:ListBucket
                Resource: arn:aws:s3:::infosec-internal-data
              - Effect: Allow
                Action: s3:ListAllMyBuckets
                Resource: '*'
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'IAMRole'
  Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - CentOS7x8664withUpdatesHVM
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: certspotter
      KeyName: !Ref 'SSHKeyName'
      SecurityGroups:
        - !Ref 'SecurityGroup'
      IamInstanceProfile: !Ref 'InstanceProfile'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash -ex\n"
            - "for i in {1..3}; do /usr/bin/easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\
              \ 2>&1 >> /var/log/initial_user-data.log && break || sleep 10; done\n"
            - "cat << EOF > /etc/cron.d/certspotter\n"
            - !Ref 'CronSchedule'
            - " centos /home/centos/gocode/bin/certspotter -script /home/centos/send_to_mozdef.py\n"
            - "EOF\n"
            - "yum --assumeyes install epel-release\n"
            - "yum --assumeyes install golang git python-pip awscli jq\n"
            - "pip install mozdef_client\n"
            - "install --owner=centos --group=centos --directory /home/centos/gocode\n"
            - "install --owner=centos --group=centos --directory /home/centos/.certspotter\n"
            - "install --owner=centos --group=centos --mode=0644 /dev/null /home/centos/.certspotter/watchlist\n"
            - if [[ "
            - !Select
              - '0'
              - !Ref 'WatchList'
            - '" == s3://* ]]; then'
            - '  aws s3 cp --quiet '
            - !Select
              - '0'
              - !Ref 'WatchList'
            - " /dev/stdout | jq -r '.domains|map(\".\"+.)|.[]' > /home/centos/.certspotter/watchlist\n"
            - else
            - '  echo "'
            - !Join
              - "\n"
              - !Ref 'WatchList'
            - "\" > /home/centos/.certspotter/watchlist\n"
            - "fi\n"
            - "export GOPATH=/home/centos/gocode\n"
            - "/usr/bin/go get software.sslmate.com/src/certspotter/cmd/certspotter\n"
            - "install --owner=centos --group=centos --mode=0755 /dev/null /home/centos/send_to_mozdef.py\n"
            - "cat << EOF > /home/centos/send_to_mozdef.py\n"
            - "#!/usr/bin/env python\n"
            - "import mozdef_client, os\n"
            - ARGS = ['
            - !Ref 'SQSRegion'
            - ''','''
            - !Ref 'SQSQueueName'
            - ''','''
            - !Ref 'SQSAccountId'
            - "']\n"
            - "msg = mozdef_client.MozDefEvent('https://127.0.0.1/this/url/is/not/used')\n"
            - "msg.summary = 'New certificate detected in Certificate Transparency\
              \ logs'\n"
            - "msg.tags = ['tls', 'certificatetransparency']\n"
            - "for key in (set(os.environ.data.keys()) &\n"
            - "                {'FINGERPRINT', 'LOG_URI','CERT_TYPE', 'ISSUER_DN',\
              \ 'SERIAL',\n"
            - "                 'SUBJECT_DN', 'NOT_AFTER_UNIXTIME', 'NOT_BEFORE_UNIXTIME',\n"
            - "                 'PUBKEY_HASH', 'CERT_PARSEABLE','ENTRY_INDEX'}):\n"
            - "    msg.details[key.lower().translate(None,'_')] = os.environ.data[key]\n"
            - "msg.details['dnsnames'] = [x.strip() for x\n"
            - "                            in os.environ.data['DNS_NAMES'].split(',')]\n"
            - "with open('/home/centos/.certspotter/watchlist') as f:\n"
            - "    watchlist = f.read().splitlines()\n"
            - "msg.details['watched_dnsnames'] = [\n"
            - "    dnsname for dnsname in msg.details['dnsnames']\n"
            - "    if (dnsname in watchlist)\n"
            - "    or len(\n"
            - "        [watchname for watchname in watchlist\n"
            - "         if watchname[:1] == '.'\n"
            - "         and (dnsname.endswith(watchname)\n"
            - "              or dnsname == watchname.lstrip('.'))]) > 0]\n"
            - "msg.set_send_to_sqs(True)\n"
            - "msg.set_sqs_region(ARGS[0])\n"
            - "msg.set_sqs_queue_name(ARGS[1])\n"
            - "msg.set_sqs_aws_account_id(ARGS[2])\n"
            - "msg.send()\n"
            - "EOF\n"
            - "touch /etc/cron.d/certspotter\n"
            - /usr/bin/cfn-signal '
            - !Ref 'WaitConditionHandle'
            - "' 2>&1 >> /var/log/initial_user-data.log\n"
  WaitConditionHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: Instance
    Properties:
      Handle: !Ref 'WaitConditionHandle'
      Timeout: '300'
  EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Condition: AssociateEIP
    Properties:
      AllocationId: !Ref 'EIPAllocationId'
      InstanceId: !Ref 'Instance'
Outputs:
  CloudInitOutput:
    Description: The data returned to the WaitConditionHandle from Cloud Init
    Value: !GetAtt 'WaitCondition.Data'
